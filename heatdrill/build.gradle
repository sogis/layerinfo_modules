
/*
task stopHeatdrillMock(type:Exec) {
 	commandLine 'docker', 'rm', '-f', 'heatdrill'
 	ignoreExitValue true
}

task startHeatdrillMock(type:Exec, dependsOn:stopHeatdrillMock) {
 	workingDir "$projectDir/mockservice"
 	commandLine './run_heatdrill.sh', 'bg'
}

task stopMockDb(type:Exec) {
 	commandLine 'docker', 'rm', '-f', 'heatdrill_mockdb'
 	ignoreExitValue true
}

task startMockDb(type:Exec, dependsOn:stopMockDb) {
 	workingDir "$projectDir/mockservice"
 	commandLine './run_mockdb.sh', 'bg'
}


task startEnvironment {
    dependsOn startMockDb
    dependsOn startHeatdrillMock

    doLast{
        sleep(5 * 1000)
    }
}

task stopEnvironment {
    dependsOn stopMockDb
    dependsOn stopHeatdrillMock
}
*/

task stopEnvironment(type:Exec) {
  workingDir "$projectDir/mockservice"
  commandLine 'docker-compose', 'down'
}

task startEnvironment(type:Exec, dependsOn: stopEnvironment) {
  workingDir "$projectDir/mockservice"
  commandLine 'docker-compose', 'up', '-d'
}

task test(type:Exec) {
  workingDir "$projectDir"
  commandLine './runtests.sh'
}

ext {
  zipName = String.format("heatdrill_%s.zip", new Date().format('yyyyMMdd'))
}

task delDistFolder(type: Delete, dependsOn:test) {
  delete "$projectDir/dist"
}

task packageDistribution(type: Zip, dependsOn:delDistFolder) {

  archiveFileName = zipName
  destinationDirectory = file("$projectDir/dist")

  from("$projectDir/src/heatdrill"){
    exclude "__pycache__"
  }
}

